// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package db

import (
	"context"
)

const createSemesterResultData = `-- name: CreateSemesterResultData :one
INSERT OR REPLACE INTO semester_result_data(student_roll_number, semester, cgpi, sgpi)
VALUES (?, ?, ?, ?) RETURNING student_roll_number, semester, cgpi, sgpi
`

type CreateSemesterResultDataParams struct {
	StudentRollNumber string  `json:"student_roll_number"`
	Semester          int64   `json:"semester"`
	Cgpi              float64 `json:"cgpi"`
	Sgpi              float64 `json:"sgpi"`
}

func (q *Queries) CreateSemesterResultData(ctx context.Context, arg CreateSemesterResultDataParams) (SemesterResultDatum, error) {
	row := q.db.QueryRowContext(ctx, createSemesterResultData,
		arg.StudentRollNumber,
		arg.Semester,
		arg.Cgpi,
		arg.Sgpi,
	)
	var i SemesterResultDatum
	err := row.Scan(
		&i.StudentRollNumber,
		&i.Semester,
		&i.Cgpi,
		&i.Sgpi,
	)
	return i, err
}

const createStudent = `-- name: CreateStudent :one
INSERT OR REPLACE INTO student(roll_number, name, fathers_name, batch, branch, latest_semester, cgpi)
VALUES (?, ?, ?, ?, ?, ?, ?) RETURNING roll_number, name, fathers_name, batch, branch, latest_semester, cgpi
`

type CreateStudentParams struct {
	RollNumber     string  `json:"roll_number"`
	Name           string  `json:"name"`
	FathersName    string  `json:"fathers_name"`
	Batch          string  `json:"batch"`
	Branch         string  `json:"branch"`
	LatestSemester int64   `json:"latest_semester"`
	Cgpi           float64 `json:"cgpi"`
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, createStudent,
		arg.RollNumber,
		arg.Name,
		arg.FathersName,
		arg.Batch,
		arg.Branch,
		arg.LatestSemester,
		arg.Cgpi,
	)
	var i Student
	err := row.Scan(
		&i.RollNumber,
		&i.Name,
		&i.FathersName,
		&i.Batch,
		&i.Branch,
		&i.LatestSemester,
		&i.Cgpi,
	)
	return i, err
}

const createSubject = `-- name: CreateSubject :one
INSERT OR REPLACE INTO subject(code, name, credits)
VALUES (?, ?, ?) RETURNING code, name, credits
`

type CreateSubjectParams struct {
	Code    string `json:"code"`
	Name    string `json:"name"`
	Credits int64  `json:"credits"`
}

func (q *Queries) CreateSubject(ctx context.Context, arg CreateSubjectParams) (Subject, error) {
	row := q.db.QueryRowContext(ctx, createSubject, arg.Code, arg.Name, arg.Credits)
	var i Subject
	err := row.Scan(&i.Code, &i.Name, &i.Credits)
	return i, err
}

const createSubjectResultData = `-- name: CreateSubjectResultData :one
INSERT OR REPLACE INTO subject_result_data(student_roll_number, subject_code, grade, sub_gp, semester)
VALUES (?, ?, ?, ?, ?) RETURNING student_roll_number, semester, subject_code, grade, sub_gp
`

type CreateSubjectResultDataParams struct {
	StudentRollNumber string `json:"student_roll_number"`
	SubjectCode       string `json:"subject_code"`
	Grade             string `json:"grade"`
	SubGp             int64  `json:"sub_gp"`
	Semester          int64  `json:"semester"`
}

func (q *Queries) CreateSubjectResultData(ctx context.Context, arg CreateSubjectResultDataParams) (SubjectResultDatum, error) {
	row := q.db.QueryRowContext(ctx, createSubjectResultData,
		arg.StudentRollNumber,
		arg.SubjectCode,
		arg.Grade,
		arg.SubGp,
		arg.Semester,
	)
	var i SubjectResultDatum
	err := row.Scan(
		&i.StudentRollNumber,
		&i.Semester,
		&i.SubjectCode,
		&i.Grade,
		&i.SubGp,
	)
	return i, err
}

const getAllStudent = `-- name: GetAllStudent :many
SELECT roll_number, name, fathers_name, batch, branch, latest_semester, cgpi FROM student
`

func (q *Queries) GetAllStudent(ctx context.Context) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, getAllStudent)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.RollNumber,
			&i.Name,
			&i.FathersName,
			&i.Batch,
			&i.Branch,
			&i.LatestSemester,
			&i.Cgpi,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudent = `-- name: GetStudent :one
SELECT roll_number, name, fathers_name, batch, branch, latest_semester, cgpi FROM student where roll_number = ? LIMIT 1
`

func (q *Queries) GetStudent(ctx context.Context, rollNumber string) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudent, rollNumber)
	var i Student
	err := row.Scan(
		&i.RollNumber,
		&i.Name,
		&i.FathersName,
		&i.Batch,
		&i.Branch,
		&i.LatestSemester,
		&i.Cgpi,
	)
	return i, err
}

const getStudentBranchRank = `-- name: GetStudentBranchRank :one
SELECT COUNT(*) + 1
FROM semester_result_data AS srd INNER JOIN student
ON srd.student_roll_number = student.roll_number
WHERE student.branch = ? AND srd.semester = ? AND srd.cgpi > ?
`

type GetStudentBranchRankParams struct {
	Branch   string  `json:"branch"`
	Semester int64   `json:"semester"`
	Cgpi     float64 `json:"cgpi"`
}

func (q *Queries) GetStudentBranchRank(ctx context.Context, arg GetStudentBranchRankParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getStudentBranchRank, arg.Branch, arg.Semester, arg.Cgpi)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const getStudentCGPI = `-- name: GetStudentCGPI :one
SELECT cgpi FROM semester_result_data WHERE student_roll_number = ? AND semester = ?
`

type GetStudentCGPIParams struct {
	StudentRollNumber string `json:"student_roll_number"`
	Semester          int64  `json:"semester"`
}

func (q *Queries) GetStudentCGPI(ctx context.Context, arg GetStudentCGPIParams) (float64, error) {
	row := q.db.QueryRowContext(ctx, getStudentCGPI, arg.StudentRollNumber, arg.Semester)
	var cgpi float64
	err := row.Scan(&cgpi)
	return cgpi, err
}

const getStudentClassRank = `-- name: GetStudentClassRank :one
SELECT COUNT(*) + 1
FROM semester_result_data AS srd INNER JOIN student
ON srd.student_roll_number = student.roll_number
WHERE student.batch = ? AND student.branch = ? AND srd.semester = ? AND srd.cgpi > ?
`

type GetStudentClassRankParams struct {
	Batch    string  `json:"batch"`
	Branch   string  `json:"branch"`
	Semester int64   `json:"semester"`
	Cgpi     float64 `json:"cgpi"`
}

func (q *Queries) GetStudentClassRank(ctx context.Context, arg GetStudentClassRankParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getStudentClassRank,
		arg.Batch,
		arg.Branch,
		arg.Semester,
		arg.Cgpi,
	)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const getStudentSemestersResult = `-- name: GetStudentSemestersResult :many
SELECT student_roll_number, semester, cgpi, sgpi FROM semester_result_data where student_roll_number = ?
`

func (q *Queries) GetStudentSemestersResult(ctx context.Context, studentRollNumber string) ([]SemesterResultDatum, error) {
	rows, err := q.db.QueryContext(ctx, getStudentSemestersResult, studentRollNumber)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SemesterResultDatum
	for rows.Next() {
		var i SemesterResultDatum
		if err := rows.Scan(
			&i.StudentRollNumber,
			&i.Semester,
			&i.Cgpi,
			&i.Sgpi,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentSubjectsResult = `-- name: GetStudentSubjectsResult :many
SELECT student_roll_number, semester, subject_code, grade, sub_gp FROM subject_result_data where student_roll_number = ? and semester = ?
`

type GetStudentSubjectsResultParams struct {
	StudentRollNumber string `json:"student_roll_number"`
	Semester          int64  `json:"semester"`
}

func (q *Queries) GetStudentSubjectsResult(ctx context.Context, arg GetStudentSubjectsResultParams) ([]SubjectResultDatum, error) {
	rows, err := q.db.QueryContext(ctx, getStudentSubjectsResult, arg.StudentRollNumber, arg.Semester)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubjectResultDatum
	for rows.Next() {
		var i SubjectResultDatum
		if err := rows.Scan(
			&i.StudentRollNumber,
			&i.Semester,
			&i.SubjectCode,
			&i.Grade,
			&i.SubGp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentSubjectsResultAll = `-- name: GetStudentSubjectsResultAll :many
SELECT res.semester as semester, sbj.name as subject_name, sbj.code as subject_code, res.grade as grade, sbj.credits as credits, res.sub_gp as sub_gp
FROM subject_result_data as res JOIN subject sbj ON res.subject_code = sbj.code
where student_roll_number = ?
`

type GetStudentSubjectsResultAllRow struct {
	Semester    int64  `json:"semester"`
	SubjectName string `json:"subject_name"`
	SubjectCode string `json:"subject_code"`
	Grade       string `json:"grade"`
	Credits     int64  `json:"credits"`
	SubGp       int64  `json:"sub_gp"`
}

func (q *Queries) GetStudentSubjectsResultAll(ctx context.Context, studentRollNumber string) ([]GetStudentSubjectsResultAllRow, error) {
	rows, err := q.db.QueryContext(ctx, getStudentSubjectsResultAll, studentRollNumber)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStudentSubjectsResultAllRow
	for rows.Next() {
		var i GetStudentSubjectsResultAllRow
		if err := rows.Scan(
			&i.Semester,
			&i.SubjectName,
			&i.SubjectCode,
			&i.Grade,
			&i.Credits,
			&i.SubGp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentYearRank = `-- name: GetStudentYearRank :one
SELECT COUNT(*) + 1
FROM semester_result_data AS srd INNER JOIN student
ON srd.student_roll_number = student.roll_number
WHERE student.batch = ? AND srd.semester = ? AND srd.cgpi > ?
`

type GetStudentYearRankParams struct {
	Batch    string  `json:"batch"`
	Semester int64   `json:"semester"`
	Cgpi     float64 `json:"cgpi"`
}

func (q *Queries) GetStudentYearRank(ctx context.Context, arg GetStudentYearRankParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getStudentYearRank, arg.Batch, arg.Semester, arg.Cgpi)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}
